[0m[[0minfo[0m] [0mTagDagSpecification[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[32m+[0m A TagDag is instantiated with a tag which represents universal context. This means that every data point is, if not explicitly then implicitly tagged with it.[0m
[0m[[0minfo[0m] [0m[32m+[0m TagDag is a subclass of RootedDag, and hence a TagDag instance inherits a root. The universalTag of the TagDag is the label of this root vertex.[0m
[0m[[0minfo[0m] [0mTagDags build upon RootedDags by providing a guarantee that each string occurs AT MOST ONCE as a vertex label. To this end, a TagDag provides an interface to vertex and label manipulation.[0m
[0m[[0minfo[0m] [0m  [32m+[0m The labels of the vertices of a TagDag are stored as keys in its tagVertices member value, which is a mutable mapping from Strings to DagVertices. The value matching each of these tags is the DagVertex in the TagDag which has that tag as its label.[0m
[0m[[0minfo[0m] [0m  [32m+[0m The "hasTag" method is a means of testing whether or not a TagDag already contains a vertex with a given tag.[0m
[0m[[0minfo[0m] [0m  It is possible to make assertions regarding the existence of tags.[0m
[0m[[0minfo[0m] [0m    [32m+[0m "assertHasTag" throws an IllegalArgumentException if its argument IS NOT a registered tag.[0m
[0m[[0minfo[0m] [0m    [32m+[0m "assertHasNotTag" throws an IllegalArgumentException if its argument IS a registered tag.[0m
[0m[[0minfo[0m] [0m  A new tag may be added to a TagDag via the "insertTag" method.[0m
[0m[[0minfo[0m] [0m    [32m+[0m By default, the tag is inserted as a child of the TagDag's root vertex.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method also allows the insertion of a tag as a child to a specified Set of parents.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method also allows for specification of a Set of children of the tag to be inserted.[0m
[0m[[0minfo[0m] [0m    [32m+[0m Any insertion which ultimately violates acyclicity will result in an IllegalArgumentException and a reversion of state of the TagDag to before the insertion was attempted.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The attempted insertion of a tag which already exists will cause the method to throw an IllegalArgumentException.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method also throws an IllegalArgumentException if one of the specified parents or children is not a registered tag.[0m
[0m[[0minfo[0m] [0m  The "descendants" method returns the tags which are reachable from the given tag.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The tags are returned in a container of type Seq[String].[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method throws an IllegalArgumentException if the originating tag is not registered in the TagDag.[0m
[0m[[0minfo[0m] [0m  [32m+[0m The "validateUniversality" method checks if every registered tag in a TagDag is reachable from the universalTag.[0m
[0m[[0minfo[0m] [0m  The "link" method facilitates edge creation.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The argument order determines the direction of the edge.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method throws an exception if either one of the tags has not been registered in the TagDag.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method reverts the TagDag to its previous state and throws an IllegalArgumentException if the introduction of the link creates a cycle in the TagDag.[0m
[0m[[0minfo[0m] [0m  The "unlink" method facilitates edge removal.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The argument order determines the direction of the edge.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method throws an IllegalArgumentException if either of its arguments has not been registered in the TagDag.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method gracefully does nothing if, although both its arguments are registered in the TagDag, there is no edge between them in the specified direction.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The method reverts the TagDag to its previous state and throws an IllegalArgumentException if the specified unlinking causes the child node to become isolated.[0m
[0m[[0minfo[0m] [0m  The "groupSiblings" method facilitates the creation of a new tag representing the aggregation of some subset of the children of a given contextual tag.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The new tag is interjected between the contextual tag and its children.[0m
[0m[[0minfo[0m] [0m    [32m+[0m If the groupTag has already been registered in the TagDag, the method throws an IllegalArgumentException.[0m
[0m[[0minfo[0m] [0m    [32m+[0m If the contextTag or one of the memberTags is NOT a registered tag, or if any of the memberTags is not a child of the contextTag, the method throws an IllegalArgumentException.[0m
[0m[[0minfo[0m] [0m  The "pushChild" method provides a means to move a newly created tag (which is inserted as a child of the universal tag) down the TagDag to a more suitable location.[0m
[0m[[0minfo[0m] [0m    [32m+[0m The tag to be moved is passed as the first argument, and its new parent is passed as the second argument.[0m
[0m[[0minfo[0m] [0m    [32m+[0m If either argument is not a registered tag, the method throws an IllegalArgumentException.[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mTotal for specification TagDagSpecification[0m
[0m[[0minfo[0m] [0m[36mFinished in 150 ms[0m[0m
[0m[[0minfo[0m] [0m[36m[0m[36m27 examples, 0 failure, 0 error[0m[0m
[0m[[0minfo[0m] [0m[0m
